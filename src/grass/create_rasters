#! /usr/bin/bash
PROJECT_DIR="/home/ian/Documents/projects/bike_lanes/citibike_sdss"
DATA_DIR=$PROJECT_DIR"/data/prepared/"
OUTPUT_DIR=$PROJECT_DIR"/data/processed/grass_script_outputs/"

# All values are in feet
COARSE_RES=1000
MEDIUM_RES=1000
FINE_RES=1000
WALK_RADIUS=2640
MAX_DIST_CB_TO_STREET=60
MIN_DIST_CB_TO_CB=100

load_layer () {
    filename=$1
    layer_to_import=$2
    new_layer_name=$3
    full_path="${DATA_DIR}${filename}"
    v.import -o $full_path snap=1e-05 layer=$layer_to_import output=$new_layer_name
}

save_vector () {
    output_path="${OUTPUT_DIR}${2}"
    v.out.ogr input=$1 output=$output_path --overwrite
    }

save_raster () {
    input_raster=$1
    output_filename=$2
    output_path="${OUTPUT_DIR}${output_filename}"
    r.out.gdal input=$input_raster output=$output_path --overwrite
}

rasterize_vector () {
    # Create a new raster layer from a vector.
    input_v_name=$1
    input_v_type=$2
    output_r_name=$3
    attribute_column=$4
    v.to.rast input=$input_v_name type=$input_v_type output=$output_r_name \
	      use=attr attribute_column=$attribute_column --overwrite
}

convert_char_to_int () {
    # Replace attribute table char column with int column with same values.
    
    vector_map=$1
    char_column=$2
    int_column="${char_column}_num"
    # Add a new int column and update its values from the char column
    v.db.addcolumn $vector_map column="${int_column} integer"
    v.db.update $vector_map column=$int_column query_col=$char_column
    # Drop the char column and rename the int column to the original name
    v.db.dropcolumn map=$vector_map columns=$char_column
    v.db.renamecolumn map=$vector_map column=$int_column,$char_column
    }

##################
# Import vectors #
##################
# ACS population
load_layer acs.gpkg acs V_ACS

# NYC Open Data
load_layer open_data.gpkg bike_routes V_BIKE_ROUTES
load_layer open_data.gpkg boroughs V_BOROUGHS
load_layer open_data.gpkg motor_vehicle_crashes V_CRASHES
load_layer open_data.gpkg streets V_STREETS

# GBFS
load_layer gbfs.gpkg status_peak_summary V_GBFS_PEAK
load_layer gbfs.gpkg status_offpeak_summary V_GBFS_OFFPEAK

# Suggest a Station
load_layer sas.gpkg sas V_SAS

# MTA turnstile data
load_layer mta_2023.gpkg stations V_MTA_STATIONS

#######################################
# Create Voronoi diagrams for stations#
#######################################
v.voronoi input=V_gbfs_peak output=V_GBFS_PEAK_VORONOI

###########################
# Rasterize vector layers #
###########################

### Medium-resolution rasters (for calculating suitability layers)
g.region vector=V_boroughs res=$MEDIUM_RES

# Boroughs
convert_char_to_int V_boroughs boro_code
rasterize_vector V_boroughs area R_boroughs boro_code

# ACS population
rasterize_vector V_acs area R_ACS population

# GBFS
convert_char_to_int V_gbfs_peak capacity_available_eq_0percent
rasterize_vector V_gbfs_peak point R_gbfs_peak_no_bikes capacity_available_eq_0percent

convert_char_to_int V_gbfs_offpeak capacity_available_eq_0percent
rasterize_vector V_gbfs_offpeak point R_gbfs_offpeak_no_bikes capacity_available_eq_0percent

# Crashes
# A different method is necessary because crashes can occur close together,
# so they must be spatially binned.
v.out.ascii input=V_crashes output=- column=number_of_cyclist_injured | \
    r.in.xyz input=- z=4 output=R_crashes method=sum

# Bike routes
convert_char_to_int V_bike_routes lanecount
rasterize_vector V_bike_routes line R_bike_routes lanecount

### Fine-resolution rasters (for calculating constraint layer)
g.region vector=V_boroughs res=$FINE_RES

# Streets
convert_char_to_int V_streets rw_type
rasterize_vector V_streets line R_streets rw_type


###############################
# Constraint layers and masks #
###############################
g.region vector=V_boroughs res=$FINE_RES
r.mask raster=R_boroughs

# Reclassify streets raster to exclude highways, bridges, tunnels, etc.
# See streets metadata doc in citbike_sdss/references for all codes
echo "1 3 5 6 7 10 11 13 = 1
2 4 8 9 12 14 = NULL" | 
    r.reclass input=R_streets output=R_bikeable_streets rules=- --overwrite

# Calculate raster for distance to bikeable streets
r.grow.distance input=R_bikeable_streets distance=R_dist_bikeable_street metric=euclidean --overwrite

reclass_dist_constraint R_dist_bikeable_street \
			$MAX_DIST_CB_TO_STREET \
			R_dist_bikeable_street_constraint

# Calculate raster for distance to Citi Bike stations
r.grow.distance input=R_gbfs_peak_no_bikes distance=R_dist_cb metric=euclidean --overwrite

reclass_dist_constraint R_dist_bikeable_street \
			10 \
			$MAX_DIST_CB_TO_STREET \
			R_dist_bikeable_street_constraint

g.list vector > vectors.txt
g.list raster > rasters.txt
# ################
# # Save rasters #
# ################
# save_raster R_BOROUGHS boroughs.gtiff
# save_raster R_ACS acs_pop.gtiff
# save_raster R_GBFS_PEAK_NO_BIKES gbfs_peak_no_bikes.gtiff
# save_raster R_GBFS_OFFPEAK_NO_BIKES gbfs_offpeak_no_bikes.gtiff
# save_raster R_crashes crashes_injured_cyclists.gtiff
# save_raster R_bike_routes bike_routes.gtiff
# save_raster R_streets streets.gitff
